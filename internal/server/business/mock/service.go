// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/business/service.go

// Package mockbusiness is a generated GoMock package.
package mockbusiness

import (
	context "context"
	reflect "reflect"

	business "github.com/chernyshevuser/practicum-metrics-collector/internal/server/business"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockMetricsCollector is a mock of MetricsCollector interface.
type MockMetricsCollector struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsCollectorMockRecorder
}

// MockMetricsCollectorMockRecorder is the mock recorder for MockMetricsCollector.
type MockMetricsCollectorMockRecorder struct {
	mock *MockMetricsCollector
}

// NewMockMetricsCollector creates a new mock instance.
func NewMockMetricsCollector(ctrl *gomock.Controller) *MockMetricsCollector {
	mock := &MockMetricsCollector{ctrl: ctrl}
	mock.recorder = &MockMetricsCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsCollector) EXPECT() *MockMetricsCollectorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMetricsCollector) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockMetricsCollectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetricsCollector)(nil).Close))
}

// GetAllMetrics mocks base method.
func (m *MockMetricsCollector) GetAllMetrics(ctx context.Context) ([]business.CounterMetric, []business.GaugeMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", ctx)
	ret0, _ := ret[0].([]business.CounterMetric)
	ret1, _ := ret[1].([]business.GaugeMetric)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockMetricsCollectorMockRecorder) GetAllMetrics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockMetricsCollector)(nil).GetAllMetrics), ctx)
}

// GetMetricValue mocks base method.
func (m *MockMetricsCollector) GetMetricValue(ctx context.Context, metricType, metricName string) (*decimal.Decimal, business.MetricType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricValue", ctx, metricType, metricName)
	ret0, _ := ret[0].(*decimal.Decimal)
	ret1, _ := ret[1].(business.MetricType)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMetricValue indicates an expected call of GetMetricValue.
func (mr *MockMetricsCollectorMockRecorder) GetMetricValue(ctx, metricType, metricName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricValue", reflect.TypeOf((*MockMetricsCollector)(nil).GetMetricValue), ctx, metricType, metricName)
}

// PingDB mocks base method.
func (m *MockMetricsCollector) PingDB(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingDB", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingDB indicates an expected call of PingDB.
func (mr *MockMetricsCollectorMockRecorder) PingDB(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingDB", reflect.TypeOf((*MockMetricsCollector)(nil).PingDB), ctx)
}

// UpdateMetrics mocks base method.
func (m *MockMetricsCollector) UpdateMetrics(ctx context.Context, metrics []business.RawMetric) ([]business.CounterMetric, []business.GaugeMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetrics", ctx, metrics)
	ret0, _ := ret[0].([]business.CounterMetric)
	ret1, _ := ret[1].([]business.GaugeMetric)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateMetrics indicates an expected call of UpdateMetrics.
func (mr *MockMetricsCollectorMockRecorder) UpdateMetrics(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetrics", reflect.TypeOf((*MockMetricsCollector)(nil).UpdateMetrics), ctx, metrics)
}
